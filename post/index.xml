<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 哲学家</title>
    <link>https://helloqb.xyz/post/</link>
    <description>Recent content in Posts on 哲学家</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>©DRay. 本站遵循 CC-BY-NC 4.0 协议</copyright>
    <lastBuildDate>Wed, 03 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://helloqb.xyz/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>四宫格办公壁纸制作</title>
      <link>https://helloqb.xyz/post/2020/0603_ps/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helloqb.xyz/post/2020/0603_ps/</guid>
      <description>介绍 以 Windows 自带纯色壁纸为基础，效果如下：
流程 1. 用 Photoshop 打开壁纸
个人喜欢纯色壁纸，Windows10 上可通过背景设置为纯色壁纸后截屏得到。
2. 新建图层并填充为白色
操作： 图层（菜单栏）-&amp;gt; 新建 -&amp;gt; 图层 -&amp;gt; 编辑（菜单栏）-&amp;gt; 填充 -&amp;gt; 背景色
3. 缩小一半长宽比
操作：编辑（菜单栏）-&amp;gt; 自由变换 -&amp;gt; W:49% H:49%
4. 切割图层
以变换后的图层作为选区，分别左上、左下、右上、右下复制图层。
操作：
 对齐：选中两个图层，点击菜单栏图层里的对齐，左对齐，然后再顶部对齐； 载入选区：按住 Ctrl，并点击白色图层的缩略图； 复制图层：点击背景图层，点击 Ctrl + J，将所选区域复制到新图层中； 同样方式左下、右上、右下生成另外三个图层；  5. 增加图层样式
操作：
 双击图层打开图层样式，选择投影，距离和大小设置为 20 像素； 右键图层拷贝图层样式，然后复制到另外三个图层中；  大功告成，当然可根据自己喜好修改相关参数，添加相关文字。</description>
    </item>
    
    <item>
      <title>Spring 定时任务</title>
      <link>https://helloqb.xyz/post/2020/0602_cron/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helloqb.xyz/post/2020/0602_cron/</guid>
      <description>介绍 本文主要记录下 cron 表达式的用法，方便下次使用。
配置 程序主入口添加 @SpringBootApplication 和 @EnableScheduling 注解以启动定时任务。
import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.scheduling.annotation.EnableScheduling; @SpringBootApplication @EnableScheduling public class SchedulingTasksApplication { public static void main(String[] args) { SpringApplication.run(SchedulingTasksApplication.class); } } 然后方法上添加 @Scheduled 注解就行了。当然类注解 @Component 也必不可少。
@Scheduled(fixedDelay = 5000) public void reportCurrentTime() { System.out.println(new Date()); } 定时调度 fixedDelay
毫秒单位，以上一个调用的完成时间开始计算 如间隔 3 秒，每个任务耗时 2 秒：
@Scheduled(fixedDelay = 3000) public void errorSpiderRerun(){ LocalDateTime localDateTime = LocalDateTime.now(); System.out.println(&amp;#34;start &amp;#34; + localDateTime); try { Thread.</description>
    </item>
    
    <item>
      <title>RabbitMQ 实现跨语言通信</title>
      <link>https://helloqb.xyz/post/2020/0515_rabbitmq/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helloqb.xyz/post/2020/0515_rabbitmq/</guid>
      <description>需求场景 做项目时遇到需要 Java 和 Python 通信的场景，摸索到了三种解决方案，并都正式在项目中实施过、踩坑过、改进过、整个推翻替换过。
其中 RabbitMQ 是我最终的方案，所以会重点阐述，其中略带提一下。
三种方式的实现 1. 直接调用 有 ProcessBuilder 和 Runtime.exec() 两种方法，用法差不多，都可以传一个字符串数组。
String[] command = new String[]{&amp;#34;python&amp;#34;, &amp;#34;C:\\Users\\lenovo\\Desktop\\java2python.py&amp;#34;}; proc = Runtime.getRuntime().exec(command);// 执行py文件 ProcessBuilder 可以是列表，官方推荐 ProcessBuilder。
List&amp;lt;String&amp;gt; command = new ArrayList&amp;lt;&amp;gt;(); command.add(&amp;#34;python&amp;#34;); command.add(&amp;#34;C:\\Users\\lenovo\\Desktop\\java2python.py&amp;#34;); ProcessBuilder pb = new ProcessBuilder(command); proc = pb.start(); Process 提供 InputStream 和 ErrorStream 接收返回结果；为方便起见，可以将错误流重定向到输入流。
pb.redirectErrorStream(true);//错误流重定向 BufferedReader in = new BufferedReader(new InputStreamReader(proc.getInputStream())); 若需要立即获取其返回结果，需要用 waitFor() 方法。
//导致当前线程等待，如有必要，直到由此Process对象表示的进程已终止 code = proc.waitFor(); 坑不坑：
 Java 自带，开发方便（这个很重要&amp;hellip;&amp;hellip;老板就给你两天时间你能怎么办）。 作为一个进程开启，效率低，好在是官方类，使用时感觉控制的还行。 返回结果难以接收。可以通过输入流或者写入文件读取，但是都很不好。 目前只尝试了 Java 调用 Python，反过来感觉很难。  完整代码如下：</description>
    </item>
    
    <item>
      <title>油猴脚本初探</title>
      <link>https://helloqb.xyz/post/2020/0507_monkey/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helloqb.xyz/post/2020/0507_monkey/</guid>
      <description>认识 常言道，不装扩展的浏览器只能发挥它 40% 的能力。而扩展中不得不提的神器就是 油猴脚本。
相对扩展来说，它更轻量，只作用于指定网站，占用内存少。所以在脚本和扩展实现相同功能的情况下，我都是优先选用脚本。
个人认为油猴脚本就是一串 Javascript 代码，因而前端工程师很容易上手。作为后端工程师的我。。。应该也比较容易上手吧。开干！
脚本编写 开发环境  Chrome：可以更方便的定位 DOM。 暴力猴：有个为此站点查找脚本的功能，很方便。  需求 如果你像我一样，只是想在某个页面添加一个按钮，实现快速跳转的功能。而自己又非前端，后面的内容应该会帮到你。示例 js 很简单，前端大神的话直接无视看下元数据块的内容就行了。
以 torrentz2 网站为例，该网站磁力链接无法跳转，现在实现点击某一按钮后跳转到谷歌或者弹出磁力链接。
元数据块（Metadata Block） 用暴力猴新建脚本时，会默认创建基础的元数据块。
// ==UserScript==// @name New script - torrentz2.eu// @namespace Violentmonkey Scripts// @match *://torrentz2.eu/*// @grant none// @version 1.0// @author -// @description 2020/5/9 下午4:13:37// ==/UserScript==其中：
 name：名称 namespace：命名空间，正式发布时需要 match：脚本适用网站，另外有个 include 用法差不多，官网说这个匹配规则更安全些 grant：控制特定 api 的使用，不常用，none 即可 version：版本 author：作者 description：描述  其余我用到的有：</description>
    </item>
    
    <item>
      <title>锤子阅读文章搜索</title>
      <link>https://helloqb.xyz/post/2020/0311_python/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helloqb.xyz/post/2020/0311_python/</guid>
      <description>缘由  之前找大象公会一篇文章，在公众号里被屏蔽了，发现锤子阅读里的竟然还可以看，可能存到自己的服务器上了吧。以后文章封了可以在这里找找。 锤子阅读不支持文章搜索，有时候想要找个文章难。 划水好无聊。  脚本调用 使用 Python3 编写，单个文件，无第三方库。结果有命令行和文本两种输出方式，具体参数如下：
 -h 帮助文档 -s 订阅号名称 -k 搜索关键词，不填返回最新的文章 -n 返回文章数，默认10 -m 搜索匹配等级，默认1匹配标题 2匹配标题和摘要 -o 输出方式， 默认1命令行输出 2写入本地文件到当前目录  代码 就 200 行代码，直接贴出来了，不放到 Github 上了。
附锤子阅读APP下载 链接
import requests import sys import getopt PAGE_SIZE = 100 TEMP_FILE = &amp;#39;result.md&amp;#39; def api_site_articles(site_id, offset, page_size): &amp;#34;&amp;#34;&amp;#34;订阅号文章列表的接口json返回结果 :param site_id: :param offset: :param page_size: :return: &amp;#34;&amp;#34;&amp;#34; params = { &amp;#39;site_id&amp;#39;: site_id, &amp;#39;offset&amp;#39;: offset, &amp;#39;page_size&amp;#39;: page_size } url = r&amp;#39;http://reader.</description>
    </item>
    
    <item>
      <title>SpringMVC 下载文本实现边转码边下载</title>
      <link>https://helloqb.xyz/post/2020/0304_java/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helloqb.xyz/post/2020/0304_java/</guid>
      <description></description>
    </item>
    
    <item>
      <title>个人笔记 - Git</title>
      <link>https://helloqb.xyz/post/2020/0301_git/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helloqb.xyz/post/2020/0301_git/</guid>
      <description>SSH 客户端 Putty 和 OpenSSH 的互相转换 原本只需要用 ssh-keygen 生成密钥到 .ssh 目录，然后打开 id_rsa.pub 文件复制就行了，但是由于 Sourcetree 默认是 PuTTY，小白的我被迫研究了 PuTTY 的用法。
**1. 使用 puTTY 生成 Key**1. 打开生成器，点击 `Generate`，成功后点击 `Save private key` 生成后缀名为 `.ppk` 的文件；2. Pageant 客户端（通常在托管图标里）点击 `Add Key` 导入刚才生成的 ppk 文件；3. 同时将生成器页面上的 Key 复制到云服务器上即可。2. 使用已有的 id_rsa 导入到 puTTY
 打开生成器，点击状态栏 Conversions 中 Import Key 导入私钥 .id_rsa 文件； 同上 Save private key 然后导入。  参考： https://blog.csdn.net/caoshiying/article/details/80131761
查看单个文件提交历史 两种情况：
 选定项目的变更历史，即 git log &amp;lt;path&amp;gt;。 按行审阅选定项目，即 git blame &amp;lt;path&amp;gt;。  在 Sourcetree 中，右键想要查看的文件就会出现上述两种选项。</description>
    </item>
    
    <item>
      <title>Hugo 上手</title>
      <link>https://helloqb.xyz/post/2020/0101_hugo/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helloqb.xyz/post/2020/0101_hugo/</guid>
      <description>下载运行 主要操作：文件下载解压，添加环境变量即可。
文档链接
 下载 安装 Github 自动托管：先删除public文件再运行脚本  测试成功：hugo version, hugo help
其他操作有：
 hugo server 本地调试 hugo server -D 本地调试（显示隐藏文件） hugo server -t theme 指定主题调试 hugo 生成静态文件  主题下载 喜欢主题有：Mainroad、hugo-theme-even、Diary、harbor
git submodule 方式下载主题
 拉取主题 git submodule add url themes/diary 更新主题：进入子模块 git pull 或者 git submodule update --remote --merge  配置 支持 html 标签
[markup.goldmark.renderer] unsafe = true # enable raw HTML in Markdown 元数据 通常元数据包括如下：
--- title: &amp;#34;个人笔记 - Git&amp;#34; description: &amp;#34;个人使用 Git 时遇到的坑和使用的技巧梳理。&amp;#34; date: &amp;#34;2020-03-01&amp;#34; categories: - &amp;#34;Git&amp;#34; tags: - &amp;#34;Sourcetree&amp;#34; - &amp;#34;Note&amp;#34; --- 其他的有：</description>
    </item>
    
  </channel>
</rss>