<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 哲学家</title>
    <link>https://helloqb.xyz/categories/java/</link>
    <description>Recent content in Java on 哲学家</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>©DRay. 本站遵循 CC-BY-NC 4.0 协议</copyright>
    <lastBuildDate>Mon, 07 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://helloqb.xyz/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>YAML 配置与调用</title>
      <link>https://helloqb.xyz/post/2020/0907_yaml/</link>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helloqb.xyz/post/2020/0907_yaml/</guid>
      <description>调用 Value 注解调用 例如，YAML 文件中有个自定义配置。
myconfig:model-server-url:127.0.0.1使用 @Value 注解调用。
import org.springframework.beans.factory.annotation.Value; @Value(&amp;#34;${myconfig.model-server-url}&amp;#34;) private String modelServerUrl; 变量少的情况，代码相对简单，但当变量被多次调用的情况下，可以考虑用类包装一下，下面的就是采用这种逻辑。
ConfigurationProperties 注解调用 当参数较多时，可以使用 @ConfigurationProperties 将其绑定到一个类中。例如
myconfig:model-server-url:127.0.0.1servers:- www.abc.test.com- www.xyz.test.com配置类代码如下：
import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.boot.context.properties.EnableConfigurationProperties; import org.springframework.context.annotation.Configuration; /** * yaml config * */ @Configuration @EnableConfigurationProperties @ConfigurationProperties(prefix = &amp;#34;myconfig&amp;#34;) public class YAMLConfig { private String modelServerUrl; private List&amp;lt;String&amp;gt; servers = new ArrayList&amp;lt;&amp;gt;(); // standard getters and setters } 其中 @Configuration 和 @EnableConfigurationProperties 可以用 @Component 代替，前面那种注解更精确些。
YAML 文件中参数匹配很宽松，下划线 _ 和 - 和驼峰都能够匹配到，官方建议使用 -。</description>
    </item>
    
    <item>
      <title>MapStruct 实现 Java Bean 映射</title>
      <link>https://helloqb.xyz/post/2020/0821_mapstruct/</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helloqb.xyz/post/2020/0821_mapstruct/</guid>
      <description>介绍 项目中遇到数据库返回的字段不想全部返回给前端，一个一个 setter 挺麻烦，不够优雅。市面上有挺多映射框架如 Dozer，Orika，MapStruct，ModelMapper，JMapper 等，其中 MapStruct 只是代码生成器，使用纯 Java 的方法调用源对象和目标对象之间进行映射，并非 Java 反射机制，所以其性能最好。
实现 Maven 依赖
... &amp;lt;properties&amp;gt; &amp;lt;org.mapstruct.version&amp;gt;1.3.1.Final&amp;lt;/org.mapstruct.version&amp;gt; &amp;lt;/properties&amp;gt; ... &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mapstruct&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mapstruct&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${org.mapstruct.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; ... &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt; &amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt; &amp;lt;annotationProcessorPaths&amp;gt; &amp;lt;path&amp;gt; &amp;lt;groupId&amp;gt;org.mapstruct&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mapstruct-processor&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${org.mapstruct.version}&amp;lt;/version&amp;gt; &amp;lt;/path&amp;gt; &amp;lt;/annotationProcessorPaths&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; ... 如果项目中有用到 lombok 的话，MapStruct 也支持，添加如下即可。
&amp;lt;annotationProcessorPaths&amp;gt; &amp;lt;path&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${lombok.version}&amp;lt;/version&amp;gt; &amp;lt;/path&amp;gt; &amp;lt;/annotationProcessorPaths&amp;gt; 普通调用
MapStruct 定义非常简单，因为它完全基于代码生成。
import org.mapstruct.Mapper; import org.mapstruct.Mapping; @Mapper public interface MapStructConverter { MapStructConverter MAPPER = Mappers.</description>
    </item>
    
    <item>
      <title>进一步了解 RabbitMQ 跨语言通讯</title>
      <link>https://helloqb.xyz/post/2020/0728_rabbitmq/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helloqb.xyz/post/2020/0728_rabbitmq/</guid>
      <description>进一步了解 开发中遇到了 RabbitMQ 丢失的情况，另外一端一直说是我的 Java 端的问题，无奈做了验证，本文的主要内容也就是这个：如何验证消息发送成功。
配置 pom.xml 文件中添加依赖。
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-amqp&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; application.yml 文件中添加配置开启确认。
spring:rabbitmq:host:192.168.0.102port:5672username:adminpassword:adminvirtual-host:slpublisher-confirm-type:correlatedpublisher-returns:truetemplate:mandatory:true重写方法 RabbitTemplate.ConfirmCallback 确认消息是否到达交换机， RabbitTemplate.ReturnCallback 确认消息是否到达队列中。
import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.amqp.core.Message; import org.springframework.amqp.rabbit.connection.CorrelationData; import org.springframework.amqp.rabbit.core.RabbitTemplate; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; import javax.annotation.PostConstruct; @Component public class CustomRabbitSend implements RabbitTemplate.ConfirmCallback, RabbitTemplate.ReturnCallback { private static final Logger LOG = LoggerFactory.getLogger(CustomRabbitSend.class); @Autowired private RabbitTemplate rabbitTemplate; @PostConstruct public void init(){ rabbitTemplate.setConfirmCallback(this); rabbitTemplate.setReturnCallback(this); } @Override public void confirm(CorrelationData correlationData, boolean b, String s) { //到达Exchange交换机，会调用此方法  if (!</description>
    </item>
    
    <item>
      <title>使用 BigDecimal 和 DecimalFormat 计算</title>
      <link>https://helloqb.xyz/post/2020/0707_decimal/</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helloqb.xyz/post/2020/0707_decimal/</guid>
      <description>介绍 本文主要记录下 BigDecimal 和 DecimalFormat 类的用法，方便下次使用。
 BigDecimal 可以更精确的进行小数点运算。 DecimalFormat 可以更好的进行与科学计算法之间的换算和保留有效数字。  BigDecimal 加减乘除等 import java.math.BigDecimal; new BigDecimal(&amp;#34;3.1&amp;#34;).add(new BigDecimal(&amp;#34;1.2&amp;#34;));//加 new BigDecimal(&amp;#34;3.1&amp;#34;).subtract(new BigDecimal(&amp;#34;1.2&amp;#34;));//减 new BigDecimal(&amp;#34;3.1&amp;#34;).multiply(new BigDecimal(&amp;#34;1.2&amp;#34;));//乘 new BigDecimal(&amp;#34;3.1&amp;#34;).divide(new BigDecimal(&amp;#34;1.2&amp;#34;), 2);//除 new BigDecimal(&amp;#34;3.1&amp;#34;).max(new BigDecimal(&amp;#34;1.2&amp;#34;));//最大值 new BigDecimal(&amp;#34;3.1&amp;#34;).compareTo(new BigDecimal(&amp;#34;1.2&amp;#34;));//比较 四舍五入 BigDecimal.ROUND_UP：不降低计算值的大小(和正负无关)
//不降低计算值的大小（不考虑负号） new BigDecimal(&amp;#34;1.345&amp;#34;).setScale(2, BigDecimal.ROUND_UP); //1.35 new BigDecimal(&amp;#34;1.346&amp;#34;).setScale(2, BigDecimal.ROUND_UP); //1.35 new BigDecimal(&amp;#34;-1.345&amp;#34;).setScale(2, BigDecimal.ROUND_UP); //-1.35 new BigDecimal(&amp;#34;-1.346&amp;#34;).setScale(2, BigDecimal.ROUND_UP); //-1.35 BigDecimal.ROUND_DOWN：不增加计算值的大小(和正负无关)
//不增加计算值的大小（不考虑负号） new BigDecimal(&amp;#34;1.345&amp;#34;).setScale(2, BigDecimal.ROUND_DOWN); //1.34 new BigDecimal(&amp;#34;1.346&amp;#34;).setScale(2, BigDecimal.ROUND_DOWN); //1.34 new BigDecimal(&amp;#34;-1.345&amp;#34;).setScale(2, BigDecimal.ROUND_DOWN); //-1.34 new BigDecimal(&amp;#34;-1.346&amp;#34;).setScale(2, BigDecimal.</description>
    </item>
    
    <item>
      <title>Spring 定时任务</title>
      <link>https://helloqb.xyz/post/2020/0602_cron/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helloqb.xyz/post/2020/0602_cron/</guid>
      <description>介绍 本文主要记录下 cron 表达式的用法，方便下次使用。
配置 程序主入口添加 @SpringBootApplication 和 @EnableScheduling 注解以启动定时任务。
import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.scheduling.annotation.EnableScheduling; @SpringBootApplication @EnableScheduling public class SchedulingTasksApplication { public static void main(String[] args) { SpringApplication.run(SchedulingTasksApplication.class); } } 然后方法上添加 @Scheduled 注解就行了。当然类注解 @Component 也必不可少。
@Scheduled(fixedDelay = 5000) public void reportCurrentTime() { System.out.println(new Date()); } 定时调度 fixedDelay 毫秒单位，以上一个调用的完成时间开始计算。
如间隔 3 秒，每个任务耗时 2 秒：
@Scheduled(fixedDelay = 3000) public void errorSpiderRerun(){ LocalDateTime localDateTime = LocalDateTime.now(); System.out.println(&amp;#34;start &amp;#34; + localDateTime); try { Thread.</description>
    </item>
    
    <item>
      <title>RabbitMQ 实现跨语言通信</title>
      <link>https://helloqb.xyz/post/2020/0515_rabbitmq/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helloqb.xyz/post/2020/0515_rabbitmq/</guid>
      <description>需求场景 做项目时遇到需要 Java 和 Python 通信的场景，摸索到了三种解决方案，并都正式在项目中实施过、踩坑过、改进过、整个推翻替换过。
其中 RabbitMQ 是我最终的方案，所以会重点阐述，其中略带提一下。
三种方式的实现 1. 直接调用 有 ProcessBuilder 和 Runtime.exec() 两种方法，用法差不多，都可以传一个字符串数组。
String[] command = new String[]{&amp;#34;python&amp;#34;, &amp;#34;C:\\Users\\lenovo\\Desktop\\java2python.py&amp;#34;}; proc = Runtime.getRuntime().exec(command);// 执行py文件 ProcessBuilder 可以是列表，官方推荐 ProcessBuilder。
List&amp;lt;String&amp;gt; command = new ArrayList&amp;lt;&amp;gt;(); command.add(&amp;#34;python&amp;#34;); command.add(&amp;#34;C:\\Users\\lenovo\\Desktop\\java2python.py&amp;#34;); ProcessBuilder pb = new ProcessBuilder(command); proc = pb.start(); Process 提供 InputStream 和 ErrorStream 接收返回结果；为方便起见，可以将错误流重定向到输入流。
pb.redirectErrorStream(true);//错误流重定向 BufferedReader in = new BufferedReader(new InputStreamReader(proc.getInputStream())); 若需要立即获取其返回结果，需要用 waitFor() 方法。
//导致当前线程等待，如有必要，直到由此Process对象表示的进程已终止 code = proc.waitFor(); 坑不坑：
 Java 自带，开发方便（这个很重要&amp;hellip;&amp;hellip;老板就给你两天时间你能怎么办）。 作为一个进程开启，效率低，好在是官方类，使用时感觉控制的还行。 返回结果难以接收。可以通过输入流或者写入文件读取，但是都很不好。 目前只尝试了 Java 调用 Python，反过来感觉很难。  完整代码如下：</description>
    </item>
    
    <item>
      <title>SpringMVC 下载文本实现边转码边下载</title>
      <link>https://helloqb.xyz/post/2020/0304_java/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://helloqb.xyz/post/2020/0304_java/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>